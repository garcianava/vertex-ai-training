{
  "pipelineSpec": {
    "components": {
      "comp-iris-logregression": {
        "executorLabel": "exec-iris-logregression",
        "inputDefinitions": {
          "parameters": {
            "input_seed": {
              "type": "INT"
            },
            "split_count": {
              "type": "INT"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "metrics": {
              "artifactType": {
                "schemaTitle": "system.Metrics",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-iris-sgdclassifier": {
        "executorLabel": "exec-iris-sgdclassifier",
        "inputDefinitions": {
          "parameters": {
            "test_samples_fraction": {
              "type": "DOUBLE"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "metricsc": {
              "artifactType": {
                "schemaTitle": "system.ClassificationMetrics",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-wine-classification": {
        "executorLabel": "exec-wine-classification",
        "outputDefinitions": {
          "artifacts": {
            "wmetrics": {
              "artifactType": {
                "schemaTitle": "system.ClassificationMetrics",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-iris-logregression": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "iris_logregression"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'scikit-learn==1.2.2' 'kfp==1.8.22' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef iris_logregression(\n    input_seed: int,\n    split_count: int,\n    metrics: Output[Metrics],\n):\n    from sklearn import datasets, model_selection\n    from sklearn.linear_model import LogisticRegression\n\n    # Load digits dataset\n    iris = datasets.load_iris()\n    # # Create feature matrix\n    X = iris.data\n    # Create target vector\n    y = iris.target\n    # test size\n    test_size = 0.20\n\n    # cross-validation settings\n    kfold = model_selection.KFold(\n        n_splits=split_count, random_state=input_seed, shuffle=True\n    )\n    # Model instance\n    model = LogisticRegression()\n    scoring = \"accuracy\"\n    results = model_selection.cross_val_score(model, X, y, cv=kfold, scoring=scoring)\n    print(f\"results: {results}\")\n\n    # split data\n    X_train, X_test, y_train, y_test = model_selection.train_test_split(\n        X, y, test_size=test_size, random_state=input_seed\n    )\n    # fit model\n    model.fit(X_train, y_train)\n\n    # accuracy on test set\n    result = model.score(X_test, y_test)\n    print(f\"result: {result}\")\n    metrics.log_metric(\"accuracy\", (result * 100.0))\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-iris-sgdclassifier": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "iris_sgdclassifier"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'scikit-learn==1.2.2' 'kfp==1.8.22' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef iris_sgdclassifier(\n    test_samples_fraction: float,\n    metricsc: Output[ClassificationMetrics],\n):\n    from sklearn import datasets, model_selection\n    from sklearn.linear_model import SGDClassifier\n    from sklearn.metrics import confusion_matrix\n\n    iris_dataset = datasets.load_iris()\n    train_x, test_x, train_y, test_y = model_selection.train_test_split(\n        iris_dataset[\"data\"],\n        iris_dataset[\"target\"],\n        test_size=test_samples_fraction,\n    )\n\n    classifier = SGDClassifier()\n    classifier.fit(train_x, train_y)\n    predictions = model_selection.cross_val_predict(classifier, train_x, train_y, cv=3)\n    metricsc.log_confusion_matrix(\n        [\"Setosa\", \"Versicolour\", \"Virginica\"],\n        confusion_matrix(\n            train_y, predictions\n        ).tolist(),  # .tolist() to convert np array to list.\n    )\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-wine-classification": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "wine_classification"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'scikit-learn==1.2.2' 'kfp==1.8.22' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef wine_classification(wmetrics: Output[ClassificationMetrics]):\n    from sklearn.datasets import load_wine\n    from sklearn.ensemble import RandomForestClassifier\n    from sklearn.metrics import roc_curve\n    from sklearn.model_selection import cross_val_predict, train_test_split\n\n    X, y = load_wine(return_X_y=True)\n    # Binary classification problem for label 1.\n    y = y == 1\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)\n    rfc = RandomForestClassifier(n_estimators=10, random_state=42)\n    rfc.fit(X_train, y_train)\n    y_scores = cross_val_predict(rfc, X_train, y_train, cv=3, method=\"predict_proba\")\n    fpr, tpr, thresholds = roc_curve(\n        y_true=y_train, y_score=y_scores[:, 1], pos_label=True\n    )\n    wmetrics.log_roc_curve(fpr, tpr, thresholds)\n\n"
            ],
            "image": "python:3.9"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "metrics-pipeline-v2"
    },
    "root": {
      "dag": {
        "outputs": {
          "artifacts": {
            "iris-logregression-metrics": {
              "artifactSelectors": [
                {
                  "outputArtifactKey": "metrics",
                  "producerSubtask": "iris-logregression"
                }
              ]
            },
            "iris-sgdclassifier-metricsc": {
              "artifactSelectors": [
                {
                  "outputArtifactKey": "metricsc",
                  "producerSubtask": "iris-sgdclassifier"
                }
              ]
            },
            "wine-classification-wmetrics": {
              "artifactSelectors": [
                {
                  "outputArtifactKey": "wmetrics",
                  "producerSubtask": "wine-classification"
                }
              ]
            }
          }
        },
        "tasks": {
          "iris-logregression": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-iris-logregression"
            },
            "inputs": {
              "parameters": {
                "input_seed": {
                  "componentInputParameter": "seed"
                },
                "split_count": {
                  "componentInputParameter": "splits"
                }
              }
            },
            "taskInfo": {
              "name": "iris-logregression"
            }
          },
          "iris-sgdclassifier": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-iris-sgdclassifier"
            },
            "inputs": {
              "parameters": {
                "test_samples_fraction": {
                  "runtimeValue": {
                    "constantValue": {
                      "doubleValue": 0.3
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "iris-sgdclassifier"
            }
          },
          "wine-classification": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-wine-classification"
            },
            "taskInfo": {
              "name": "wine-classification"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "seed": {
            "type": "INT"
          },
          "splits": {
            "type": "INT"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "iris-logregression-metrics": {
            "artifactType": {
              "schemaTitle": "system.Metrics",
              "schemaVersion": "0.0.1"
            }
          },
          "iris-sgdclassifier-metricsc": {
            "artifactType": {
              "schemaTitle": "system.ClassificationMetrics",
              "schemaVersion": "0.0.1"
            }
          },
          "wine-classification-wmetrics": {
            "artifactType": {
              "schemaTitle": "system.ClassificationMetrics",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.22"
  },
  "runtimeConfig": {
    "gcsOutputDirectory": "gs://garcianava-vertex-ai-training/pipeline_root/iris"
  }
}