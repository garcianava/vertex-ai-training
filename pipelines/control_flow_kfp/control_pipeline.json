{
  "pipelineSpec": {
    "components": {
      "comp-args-generator-op": {
        "executorLabel": "exec-args-generator-op",
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-condition-alwaystrue-1": {
        "dag": {
          "tasks": {
            "args-generator-op": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-args-generator-op"
              },
              "taskInfo": {
                "name": "args-generator-op"
              }
            },
            "for-loop-2": {
              "componentRef": {
                "name": "comp-for-loop-2"
              },
              "dependentTasks": [
                "args-generator-op"
              ],
              "inputs": {
                "parameters": {
                  "pipelineparam--args-generator-op-Output": {
                    "taskOutputParameter": {
                      "outputParameterKey": "Output",
                      "producerTask": "args-generator-op"
                    }
                  },
                  "pipelineparam--flip-coin-op-Output": {
                    "componentInputParameter": "pipelineparam--flip-coin-op-Output"
                  },
                  "pipelineparam--json_string": {
                    "componentInputParameter": "pipelineparam--json_string"
                  }
                }
              },
              "parameterIterator": {
                "itemInput": "pipelineparam--args-generator-op-Output-loop-item",
                "items": {
                  "inputParameter": "pipelineparam--args-generator-op-Output"
                }
              },
              "taskInfo": {
                "name": "for-loop-2"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--flip-coin-op-Output": {
              "type": "STRING"
            },
            "pipelineparam--json_string": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-condition-heads-3": {
        "dag": {
          "tasks": {
            "print-op-2": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-print-op-2"
              },
              "inputs": {
                "parameters": {
                  "msg": {
                    "componentInputParameter": "pipelineparam--args-generator-op-Output-loop-item",
                    "parameterExpressionSelector": "parseJson(string_value)[\"cats\"]"
                  }
                }
              },
              "taskInfo": {
                "name": "print-op-2"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--args-generator-op-Output-loop-item": {
              "type": "STRING"
            },
            "pipelineparam--flip-coin-op-Output": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-condition-snakes-6": {
        "dag": {
          "tasks": {
            "print-op-4": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-print-op-4"
              },
              "inputs": {
                "parameters": {
                  "msg": {
                    "componentInputParameter": "pipelineparam--json_string-loop-item-subvar-snakes"
                  }
                }
              },
              "taskInfo": {
                "name": "print-op-4"
              }
            },
            "print-op-5": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-print-op-5"
              },
              "inputs": {
                "parameters": {
                  "msg": {
                    "componentInputParameter": "pipelineparam--json_string-loop-item",
                    "parameterExpressionSelector": "parseJson(string_value)[\"lizards\"]"
                  }
                }
              },
              "taskInfo": {
                "name": "print-op-5"
              }
            },
            "print-op-6": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-print-op-6"
              },
              "inputs": {
                "parameters": {
                  "msg": {
                    "componentInputParameter": "pipelineparam--json_string-loop-item",
                    "parameterExpressionSelector": "parseJson(string_value)[\"bunnies\"]"
                  }
                }
              },
              "taskInfo": {
                "name": "print-op-6"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--json_string-loop-item": {
              "type": "STRING"
            },
            "pipelineparam--json_string-loop-item-subvar-snakes": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-condition-tails-4": {
        "dag": {
          "tasks": {
            "print-op-3": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-print-op-3"
              },
              "inputs": {
                "parameters": {
                  "msg": {
                    "componentInputParameter": "pipelineparam--args-generator-op-Output-loop-item",
                    "parameterExpressionSelector": "parseJson(string_value)[\"dogs\"]"
                  }
                }
              },
              "taskInfo": {
                "name": "print-op-3"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--args-generator-op-Output-loop-item": {
              "type": "STRING"
            },
            "pipelineparam--flip-coin-op-Output": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-flip-coin-op": {
        "executorLabel": "exec-flip-coin-op",
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-for-loop-2": {
        "dag": {
          "tasks": {
            "condition-heads-3": {
              "componentRef": {
                "name": "comp-condition-heads-3"
              },
              "inputs": {
                "parameters": {
                  "pipelineparam--args-generator-op-Output-loop-item": {
                    "componentInputParameter": "pipelineparam--args-generator-op-Output-loop-item"
                  },
                  "pipelineparam--flip-coin-op-Output": {
                    "componentInputParameter": "pipelineparam--flip-coin-op-Output"
                  }
                }
              },
              "taskInfo": {
                "name": "condition-heads-3"
              },
              "triggerPolicy": {
                "condition": "inputs.parameters['pipelineparam--flip-coin-op-Output'].string_value == 'heads'"
              }
            },
            "condition-tails-4": {
              "componentRef": {
                "name": "comp-condition-tails-4"
              },
              "inputs": {
                "parameters": {
                  "pipelineparam--args-generator-op-Output-loop-item": {
                    "componentInputParameter": "pipelineparam--args-generator-op-Output-loop-item"
                  },
                  "pipelineparam--flip-coin-op-Output": {
                    "componentInputParameter": "pipelineparam--flip-coin-op-Output"
                  }
                }
              },
              "taskInfo": {
                "name": "condition-tails-4"
              },
              "triggerPolicy": {
                "condition": "inputs.parameters['pipelineparam--flip-coin-op-Output'].string_value == 'tails'"
              }
            },
            "print-op": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-print-op"
              },
              "inputs": {
                "parameters": {
                  "msg": {
                    "componentInputParameter": "pipelineparam--json_string"
                  }
                }
              },
              "taskInfo": {
                "name": "print-op"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--args-generator-op-Output": {
              "type": "STRING"
            },
            "pipelineparam--args-generator-op-Output-loop-item": {
              "type": "STRING"
            },
            "pipelineparam--flip-coin-op-Output": {
              "type": "STRING"
            },
            "pipelineparam--json_string": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-for-loop-5": {
        "dag": {
          "tasks": {
            "condition-snakes-6": {
              "componentRef": {
                "name": "comp-condition-snakes-6"
              },
              "inputs": {
                "parameters": {
                  "pipelineparam--json_string-loop-item": {
                    "componentInputParameter": "pipelineparam--json_string-loop-item"
                  },
                  "pipelineparam--json_string-loop-item-subvar-snakes": {
                    "componentInputParameter": "pipelineparam--json_string-loop-item",
                    "parameterExpressionSelector": "parseJson(string_value)[\"snakes\"]"
                  }
                }
              },
              "taskInfo": {
                "name": "condition-snakes-6"
              },
              "triggerPolicy": {
                "condition": "inputs.parameters['pipelineparam--json_string-loop-item-subvar-snakes'].string_value == 'boa'"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--json_string": {
              "type": "STRING"
            },
            "pipelineparam--json_string-loop-item": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-for-loop-7": {
        "dag": {
          "tasks": {
            "for-loop-8": {
              "componentRef": {
                "name": "comp-for-loop-8"
              },
              "inputs": {
                "parameters": {
                  "pipelineparam--json_string-loop-item": {
                    "componentInputParameter": "pipelineparam--json_string-loop-item"
                  },
                  "pipelineparam--json_string-loop-item-subvar-bunnies": {
                    "componentInputParameter": "pipelineparam--json_string-loop-item",
                    "parameterExpressionSelector": "parseJson(string_value)[\"bunnies\"]"
                  }
                }
              },
              "parameterIterator": {
                "itemInput": "pipelineparam--json_string-loop-item-subvar-bunnies-loop-item",
                "items": {
                  "inputParameter": "pipelineparam--json_string-loop-item-subvar-bunnies"
                }
              },
              "taskInfo": {
                "name": "for-loop-8"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--json_string": {
              "type": "STRING"
            },
            "pipelineparam--json_string-loop-item": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-for-loop-8": {
        "dag": {
          "tasks": {
            "print-op-7": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-print-op-7"
              },
              "inputs": {
                "parameters": {
                  "msg": {
                    "componentInputParameter": "pipelineparam--json_string-loop-item-subvar-bunnies-loop-item",
                    "parameterExpressionSelector": "parseJson(string_value)[\"cottontail\"]"
                  }
                }
              },
              "taskInfo": {
                "name": "print-op-7"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--json_string-loop-item": {
              "type": "STRING"
            },
            "pipelineparam--json_string-loop-item-subvar-bunnies": {
              "type": "STRING"
            },
            "pipelineparam--json_string-loop-item-subvar-bunnies-loop-item": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-print-op": {
        "executorLabel": "exec-print-op",
        "inputDefinitions": {
          "parameters": {
            "msg": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-print-op-2": {
        "executorLabel": "exec-print-op-2",
        "inputDefinitions": {
          "parameters": {
            "msg": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-print-op-3": {
        "executorLabel": "exec-print-op-3",
        "inputDefinitions": {
          "parameters": {
            "msg": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-print-op-4": {
        "executorLabel": "exec-print-op-4",
        "inputDefinitions": {
          "parameters": {
            "msg": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-print-op-5": {
        "executorLabel": "exec-print-op-5",
        "inputDefinitions": {
          "parameters": {
            "msg": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-print-op-6": {
        "executorLabel": "exec-print-op-6",
        "inputDefinitions": {
          "parameters": {
            "msg": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-print-op-7": {
        "executorLabel": "exec-print-op-7",
        "inputDefinitions": {
          "parameters": {
            "msg": {
              "type": "STRING"
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-args-generator-op": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "args_generator_op"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.22' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef args_generator_op() -> str:\n    import json\n\n    return json.dumps(\n        [{\"cats\": \"1\", \"dogs\": \"2\"}, {\"cats\": \"10\", \"dogs\": \"20\"}],\n        sort_keys=True,\n    )\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-flip-coin-op": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "flip_coin_op"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.22' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef flip_coin_op() -> str:\n    \"\"\"Flip a coin and output heads or tails randomly.\"\"\"\n    import random\n\n    result = \"heads\" if random.randint(0, 1) == 0 else \"tails\"\n    return result\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-print-op": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "print_op"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.22' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef print_op(msg: str):\n    print(msg)\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-print-op-2": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "print_op"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.22' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef print_op(msg: str):\n    print(msg)\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-print-op-3": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "print_op"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.22' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef print_op(msg: str):\n    print(msg)\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-print-op-4": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "print_op"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.22' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef print_op(msg: str):\n    print(msg)\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-print-op-5": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "print_op"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.22' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef print_op(msg: str):\n    print(msg)\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-print-op-6": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "print_op"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.22' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef print_op(msg: str):\n    print(msg)\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-print-op-7": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "print_op"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.22' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef print_op(msg: str):\n    print(msg)\n\n"
            ],
            "image": "python:3.7"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "control"
    },
    "root": {
      "dag": {
        "tasks": {
          "condition-alwaystrue-1": {
            "componentRef": {
              "name": "comp-condition-alwaystrue-1"
            },
            "dependentTasks": [
              "flip-coin-op"
            ],
            "inputs": {
              "parameters": {
                "pipelineparam--flip-coin-op-Output": {
                  "taskOutputParameter": {
                    "outputParameterKey": "Output",
                    "producerTask": "flip-coin-op"
                  }
                },
                "pipelineparam--json_string": {
                  "componentInputParameter": "json_string"
                }
              }
            },
            "taskInfo": {
              "name": "condition-alwaystrue-1"
            },
            "triggerPolicy": {
              "condition": "inputs.parameters['pipelineparam--flip-coin-op-Output'].string_value != 'no-such-result'"
            }
          },
          "flip-coin-op": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-flip-coin-op"
            },
            "taskInfo": {
              "name": "flip-coin-op"
            }
          },
          "for-loop-5": {
            "componentRef": {
              "name": "comp-for-loop-5"
            },
            "inputs": {
              "parameters": {
                "pipelineparam--json_string": {
                  "componentInputParameter": "json_string"
                }
              }
            },
            "parameterIterator": {
              "itemInput": "pipelineparam--json_string-loop-item",
              "items": {
                "inputParameter": "pipelineparam--json_string"
              }
            },
            "taskInfo": {
              "name": "for-loop-5"
            }
          },
          "for-loop-7": {
            "componentRef": {
              "name": "comp-for-loop-7"
            },
            "inputs": {
              "parameters": {
                "pipelineparam--json_string": {
                  "componentInputParameter": "json_string"
                }
              }
            },
            "parameterIterator": {
              "itemInput": "pipelineparam--json_string-loop-item",
              "items": {
                "inputParameter": "pipelineparam--json_string"
              }
            },
            "taskInfo": {
              "name": "for-loop-7"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "json_string": {
            "type": "STRING"
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.22"
  },
  "runtimeConfig": {
    "gcsOutputDirectory": "gs://garcianava-vertex-ai-training/pipeline_root/control",
    "parameters": {
      "json_string": {
        "stringValue": "[{\"bunnies\": [{\"cottontail\": \"bugs\"}, {\"cottontail\": \"thumper\"}], \"lizards\": \"anole\", \"snakes\": \"anaconda\"}, {\"bunnies\": [{\"cottontail\": \"roger\"}], \"lizards\": \"gecko\", \"snakes\": \"cobra\"}, {\"bunnies\": [{\"cottontail\": \"fluffy\"}, {\"cottontail\": \"peter\", \"fuzzy_lop\": \"petunia\"}], \"lizards\": \"iguana\", \"snakes\": \"boa\"}]"
      }
    }
  }
}